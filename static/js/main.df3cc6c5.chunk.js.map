{"version":3,"sources":["components/AddRoutePoint.tsx","components/RoutePoint.tsx","components/RoutePointsList.tsx","components/YandexMap.tsx","App.tsx","index.tsx"],"names":["AddRoutePoint","onAdd","useState","title","setTitle","onSubmit","event","preventDefault","type","className","placeholder","value","onChange","currentTarget","RoutePoint","point","onRemove","index","draggableId","coordinates","toString","provided","ref","innerRef","draggableProps","dragHandleProps","style","textOverflow","aria-label","onClick","RoutePointsList","points","onOrderList","length","onDragEnd","result","destination","orderedList","splice","source","movedItem","droppableId","droppableProps","map","YandexMap","mapCenter","onMoveMapCenter","onMovePlacemark","ymaps","useRef","query","apikey","process","width","height","state","center","zoom","onActionEnd","e","newCenter","originalEvent","getCenter","modules","onLoad","y","current","geometry","properties","balloonContentHeader","options","draggable","target","getCoordinates","targetPlacemark","get","geocode","then","geoObjectAddress","geoObjects","getAddressLine","set","balloonContent","catch","error","console","log","balloonCloseButton","strokeColor","strokeWidth","strokeOpacity","App","setPoints","newPoint","pointToBeRemoved","filter","aspectRatio","movedPoint","newCoordinates","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df3cc6c5.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\ntype Props = {\n    onAdd: (title: string) => void;\n};\n\nconst AddRoutePoint: React.FC<Props> = ({onAdd}) => {\n    const [title, setTitle] = useState('');\n\n    const handleChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n        setTitle(event.currentTarget.value);\n    };\n\n    const handleSubmit: React.FormEventHandler<HTMLFormElement> = (event) => {\n        event.preventDefault();\n        if (title) {\n            onAdd(title);\n            setTitle('');\n        }\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input type=\"text\" className=\"form-control\" placeholder=\"Новая точка маршрута\" value={title}\n                   onChange={handleChange}/>\n        </form>\n    );\n};\n\nexport default AddRoutePoint;","import React from 'react';\nimport {Point} from \"../types\";\nimport {Draggable} from \"react-beautiful-dnd\";\n\ntype Props = {\n    point: Point;\n    onRemove: (point: Point) => void;\n    index: number;\n};\n\nconst RoutePoint: React.FC<Props> = ({point, onRemove, index}) => {\n    return (\n        <Draggable draggableId={point.coordinates.toString()} index={index}>\n            {provided =>\n                <li className=\"list-group-item d-flex justify-content-between align-items-center\"\n                    ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n                    <span className=\"overflow-hidden\" style={{textOverflow: \"ellipsis\"}}>{point.title}</span>\n                    <button className=\"btn btn-sm\" aria-label=\"delete\" onClick={() => onRemove(point)}>&times;</button>\n                </li>\n            }\n        </Draggable>\n    );\n};\n\nexport default RoutePoint;","import React from 'react';\nimport {Point} from \"../types\";\nimport RoutePoint from \"./RoutePoint\";\nimport {DragDropContext, Droppable, DropResult} from \"react-beautiful-dnd\";\n\ntype Props = {\n    points: Point[];\n    onRemove: (point: Point) => void;\n    onOrderList: (orderedList: Point[]) => void;\n};\n\nconst RoutePointsList: React.FC<Props> = ({points, onRemove, onOrderList}) => {\n    if (points.length === 0) {\n        return null;\n    }\n\n    const handleDragEnd = (result: DropResult) => {\n        if (!result.destination) {\n            return;\n        }\n\n        const orderedList = [...points];\n        const [movedItem] = orderedList.splice(result.source.index, 1);\n        orderedList.splice(result.destination.index, 0, movedItem);\n        onOrderList(orderedList);\n    };\n\n    return (\n        <DragDropContext onDragEnd={handleDragEnd}>\n            <Droppable droppableId=\"routePoints\">\n                {(provided => (\n                    <ul className=\"list-group\" ref={provided.innerRef} {...provided.droppableProps}>\n                        {points.map((point, index) =>\n                            <RoutePoint point={point} onRemove={onRemove} index={index}\n                                        key={point.coordinates.toString()}/>\n                        )}\n                        {provided.placeholder}\n                    </ul>\n                ))}\n            </Droppable>\n        </DragDropContext>\n    );\n};\n\nexport default RoutePointsList;","import React, {useRef} from 'react';\nimport {Map, Placemark, Polyline, YMaps} from \"react-yandex-maps\";\nimport {Point} from \"../types\";\n\ntype Props = {\n    points: Point[];\n    mapCenter: Point['coordinates'];\n    onMoveMapCenter: (coordinates: Point['coordinates']) => void;\n    onMovePlacemark: (point: Point, coordinates: Point['coordinates']) => void;\n};\n\nconst YandexMap: React.FC<Props> = ({points, mapCenter, onMoveMapCenter, onMovePlacemark}) => {\n    const handleMoveMap = (e: any) => {\n        const newCenter = e.originalEvent.map.getCenter();\n        onMoveMapCenter(newCenter);\n    };\n\n    const ymaps = useRef<any>(null);\n\n    return (\n        <YMaps query={{apikey: process.env.REACT_APP_YANDEX_API_KEY}}>\n            <Map width=\"100%\" height=\"100%\" state={{center: mapCenter, zoom: 9}}\n                 onActionEnd={handleMoveMap} modules={['geocode']}\n                 onLoad={y => {\n                     ymaps.current = y;\n                 }}\n            >\n                {points.map(point =>\n                    <Placemark\n                        key={point.coordinates.toString()}\n                        geometry={point.coordinates}\n                        properties={{\n                            balloonContentHeader: point.title,\n                        }}\n                        options={{\n                            draggable: true,\n                        }}\n                        modules={['geoObject.addon.balloon']}\n                        onDragEnd={(e: any) => {\n                            const coordinates = e.originalEvent.target.geometry.getCoordinates();\n                            onMovePlacemark(point, coordinates);\n                        }}\n                        onClick={(e: any) => {\n                            const targetPlacemark = e.get('target');\n                            ymaps.current.geocode(point.coordinates)\n                                .then((result: any) => {\n                                    const geoObjectAddress = result.geoObjects.get(0).getAddressLine();\n                                    targetPlacemark.properties.set({\n                                        balloonContent: geoObjectAddress,\n                                    });\n                                })\n                                .catch((error: any) => console.log(error));\n                        }}\n                    />\n                )}\n                <Polyline\n                    geometry={points.map(point => point.coordinates)}\n                    options={{\n                        balloonCloseButton: false,\n                        strokeColor: '#000',\n                        strokeWidth: 4,\n                        strokeOpacity: 0.5,\n                    }}\n                />\n            </Map>\n        </YMaps>\n    );\n};\n\nexport default YandexMap;","import React, {useRef, useState} from 'react';\nimport AddRoutePoint from \"./components/AddRoutePoint\";\nimport RoutePointsList from \"./components/RoutePointsList\";\nimport {Point} from \"./types\";\nimport YandexMap from \"./components/YandexMap\";\n\nfunction App() {\n    const [points, setPoints] = useState<Point[]>([]);\n\n    const mapCenter = useRef<Point['coordinates']>([55.75, 37.57]);\n\n    const updateMapCenter = (coordinates: Point['coordinates']) => {\n        mapCenter.current = coordinates;\n    };\n\n    const handleMovePlacemark = (movedPoint: Point, newCoordinates: Point['coordinates']) => {\n        setPoints(points.map(point => {\n            if (point === movedPoint) {\n                return {\n                    ...point,\n                    coordinates: newCoordinates,\n                }\n            }\n            return point;\n        }));\n    };\n\n    const handleAddPoint = (title: string) => {\n        const coordinates = mapCenter.current;\n        const newPoint: Point = {\n            title,\n            coordinates,\n        };\n        setPoints([...points, newPoint]);\n    };\n\n    const handleRemovePoint = (pointToBeRemoved: Point) => {\n        setPoints(points.filter(point => point !== pointToBeRemoved));\n    }\n\n    return (\n        <div className=\"container\">\n            <div className=\"row pt-3\">\n                <div className=\"col-12 col-md-5 mb-1\">\n                    <div className=\"pb-2\">\n                        <AddRoutePoint onAdd={handleAddPoint}/>\n                    </div>\n                    <div>\n                        <RoutePointsList points={points} onRemove={handleRemovePoint}\n                                         onOrderList={orderedList => setPoints(orderedList)}/>\n                    </div>\n                </div>\n                <div className=\"col-12 col-md-7 mt-3 mt-md-0\" style={{aspectRatio: '1 / 1'}}>\n                    <YandexMap points={points} mapCenter={mapCenter.current} onMoveMapCenter={updateMapCenter}\n                               onMovePlacemark={handleMovePlacemark}/>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}